{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Magento Web Server Template",
    "Parameters": {
        "AdminEmail": {
            "Description": "Email of the Magento site administrator",
            "Type": "String"
        },
        "AdminFirstName": {
            "Description": "First Name of the Magento site administrator",
            "Type": "String"
        },
        "AdminLastName": {
            "Description": "Last Name of the Magento site administrator",
            "Type": "String"
        },
        "AdminPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password of the Magento site administrator",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "True",
            "Type": "String"
        },
        "AdminUserName": {
            "Description": "Username of the Magento site administrator",
            "Type": "String"
        },
        "DBMasterUserPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "RDS MySQL Database Password",
            "NoEcho": "True",
            "Type": "String"
        },
        "DBMasterUsername": {
            "Default": "admin",
            "Description": "RDS MySQL Database Username",
            "Type": "String"
        },
        "DBName": {
            "Default": "",
            "Description": "RDS MySQL Database Name",
            "Type": "String"
        },
        "DNSName": {
            "Default": "",
            "Description": "DNS Name for the magento site, you should create an alias for the ELB after the stack creation",
            "Type": "String"
        },
        "ELBSecurityGroup": {
            "Description": "ELB Security Group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "ElastiCacheEndpoint": {
            "Default": "",
            "Description": "ElastiCache Endpoint",
            "Type": "String"
        },
        "ElasticLoadBalancerSubnets": {
            "ConstraintDescription": "Must be list of existing Public subnet IDs",
            "Default": "",
            "Description": "A list of public subnet identifiers of Amazon VPCs where the Elastic Load Balancer would be launched.",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "KeyPair": {
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "MagentoCurrency": {
            "Default": "EUR",
            "Description": "Magento Currency",
            "Type": "String"
        },
        "MagentoLanguage": {
            "Default": "en_US",
            "Description": "Magento Language",
            "Type": "String"
        },
        "MagentoTimezone": {
            "Default": "Europe/Lisbon",
            "Description": "Magento Timezone",
            "Type": "String"
        },
        "MagentoReleaseMedia": {
            "Default": "",
            "Description": "Amazon S3 path to download magento .tar.gz file",
            "Type": "String"
        },
        "MySQLEndPointAddress": {
            "Default": "",
            "Description": "RDS MySQL Endpoint",
            "Type": "String"
        },
        "NotificationEmail": {
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address.",
            "Description": "Email address to notify if there are any scaling operations",
            "Type": "String"
        },
        "S3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Magento Installation bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "cfmagentotemplates",
            "Description": "S3 bucket name for the Magento Installation assets. Magento Installation bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "S3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Magento Installation key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "magento-cf/",
            "Description": "S3 key prefix for the Magento Installation assets. Magento Installation key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "SSLCertificateId": {
            "Default": "",
            "Description": "The ARN of the SSL certificate to use for the webserver. [optional]",
            "Type": "String"
        },
        "VPCID": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WebServerDesiredCapacity": {
            "Default": "1",
            "Description": "Desired No of web server instances",
            "Type": "Number"
        },
        "WebServerInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ],
            "ConstraintDescription": "Choose an instance type.",
            "Default": "m4.large",
            "Description": "Web Server node instance type",
            "Type": "String"
        },
        "WebServerMaxSize": {
            "Default": "1",
            "Description": "Maximum No of web server instances",
            "Type": "Number"
        },
        "WebServerMinSize": {
            "Default": "1",
            "Description": "Minimum No of web server instances",
            "Type": "Number"
        },
        "WebServerSecurityGroup": {
            "Description": "Web Server Security Group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "WebServerSubnets": {
            "ConstraintDescription": "must be list of existing subnet Ids",
            "Default": "",
            "Description": "A list of subnet identifiers of Amazon VPCs where the WebServer Autoscaling would be launched.",
            "Type": "List<AWS::EC2::Subnet::Id>"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2018.03.0.20180622-x86_64-gp2"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-9c9443e3"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-ebc47185"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-5a8da735"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-ed838091"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-33f92051"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-03e86a67"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-a058674b"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-e4515e0e"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-b2b55cd5"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-83d58fef"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-cfe4b2b0"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-40142d25"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-0e86606d"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-0ad99772"
            }
        }
    },
    "Conditions": {
        "UseSSL": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SSLCertificateId"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseELBName": {
            "Fn::Equals": [
                {
                    "Ref": "DNSName"
                },
                ""
            ]
        }
    },
    "Resources": {
        "MagentoMainLogGroup": {
            "Type": "AWS::Logs::LogGroup"
        },
        "NewIamInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${MagentoMainLogGroup}:*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "Instance-Limited-Role"
                    }
                ]
            }
        },
        "NewIamInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "NewIamInstanceRole"
                    }
                ]
            }
        },
        "MagentoAMIWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "MagentoAMIWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "MagentoAMI",
            "Properties": {
                "Handle": {
                    "Ref": "MagentoAMIWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "MagentoAMI": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "Comment": "Install a Magento web server",
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "NewIamInstanceRole"
                        }
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Sub": "[general]\nstate_file= /var/log/agent-state\n[/home/ec2-user/misc/install]\nfile = /var/log/cloud-init-output.log\nlog_group_name = ${MagentoMainLogGroup}\nlog_stream_name = {instance_id}/magento/install.log\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Sub": "[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}\nrunas=root\n"
                                }
                            },
                            "/install_magento.sh": {
                                "source": {
                                    "Fn::Sub": "https://${S3BucketName}.s3.amazonaws.com/${S3KeyPrefix}scripts/install_magento.sh"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/configure_magento.sh": {
                                "source": {
                                    "Fn::Sub": "https://${S3BucketName}.s3.amazonaws.com/${S3KeyPrefix}scripts/configure_magento.sh"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/home/ec2-user/magento.tar.gz": {
                                "source": {
                                    "Ref": "MagentoReleaseMedia"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/params.txt": {
                                "content": {
                                    "Fn::Sub": [
                                        "MySQLEndPointAddress|${MySQLEndPointAddress}\nDBMasterUsername|${DBMasterUsername}\nDBMasterUserPassword|${DBMasterUserPassword}\nDBName|${DBName}\nDNSName|${Param1}\nAdminFirstName|${AdminFirstName}\nAdminLastName|${AdminLastName}\nAdminEmail|${AdminEmail}\nAdminUserName|${AdminUserName}\nAdminPassword|${AdminPassword}\nElastiCacheEndpoint|${ElastiCacheEndpoint}\nFileSystem|${FileSystem}\nMagentoReleaseMedia|${MagentoReleaseMedia}\nSSLCertificateId|${SSLCertificateId}\nMagentoLanguage|${MagentoLanguage}\nMagentoCurrency|${MagentoCurrency}\nMagentoTimezone|${MagentoTimezone}\n",
                                        {
                                            "Param1": {
                                                "Fn::If": [
                                                    "UseELBName",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ApplicationLoadBalancer",
                                                            "DNSName"
                                                        ]
                                                    },
                                                    {
                                                        "Ref": "DNSName"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "mode": "000440",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                },
                                "awslogs": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/awslogs/awslogs.conf"
                                    ],
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "IamInstanceProfile": {
                    "Ref": "NewIamInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUXHVM"
                    ]
                },
                "InstanceType": {
                    "Ref": "WebServerInstanceType"
                },
                "SubnetId": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "WebServerSubnets"
                        }
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MagentoAMI  --region ${AWS::Region}\nchmod a+x install_magento.sh\n./install_magento.sh /tmp/params.txt\n/opt/aws/bin/cfn-signal -e $? -d \"`cat /home/ec2-user/adminuri`\" -r \"Build Process Complete\" '${MagentoAMIWaitHandle}'\n"
                    }
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "AWS Magento Installation (Magento)"
                    },
                    {
                        "Key": "Name",
                        "Value": "MagentoAMI for magento"
                    }
                ]
            }
        },
        "AMIInfoFunctionExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:StopInstances",
                                        "ec2:CreateImage",
                                        "ec2:DeregisterImage"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            }
        },
        "AMIInfoFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Runtime": "python2.7",
                "Timeout": "300",
                "Role": {
                    "Fn::GetAtt": [
                        "AMIInfoFunctionExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "import json\nimport cfnresponse\nimport boto3\nfrom random import randint\ndef lambda_handler(event, context):\n  if event['RequestType'] == 'Delete':\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    return\n  try:\n    ec2 = boto3.resource('ec2')\n    instance = ec2.Instance(event['ResourceProperties']['InstanceId'])\n    instance.stop()\n    instance.wait_until_stopped()\n    image = instance.create_image(Name=\"%s-%i\" % (event['ResourceProperties']['AMIName'], randint(0,100000)), Description=\"Created By Magento Stack Cloudformation Template\")\n    boto3.client('ec2').get_waiter('image_available').wait(ImageIds=[image.id])\n    responseData = {'ami':image.id}\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)\n  except Exception as inst:\n    print(inst)\n    cfnresponse.send(event, context, cfnresponse.FAILED, {})\n"
                }
            }
        },
        "AMICleanUpFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Runtime": "python2.7",
                "Timeout": "300",
                "Role": {
                    "Fn::GetAtt": [
                        "AMIInfoFunctionExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "import json\nimport cfnresponse\nimport boto3\nfrom random import randint\ndef lambda_handler(event, context):\n  if event['RequestType'] == 'Delete':\n    try:\n      ec2 = boto3.resource('ec2')\n      image = ec2.Image(event['ResourceProperties']['AMIId'])\n      image.deregister()\n      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    except Exception as inst:\n      print(inst)\n      cfnresponse.send(event, context, cfnresponse.FAILED, {})\n  else:\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n"
                }
            }
        },
        "CreateAMI": {
            "Type": "Custom::CreateAMI",
            "DeletionPolicy": "Retain",
            "DependsOn": "MagentoAMIWaitCondition",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AMIInfoFunction",
                        "Arn"
                    ]
                },
                "InstanceId": {
                    "Ref": "MagentoAMI"
                },
                "AMIName": "MagentoAMI",
                "Version": 1
            }
        },
        "CleanUpAMI": {
            "Type": "Custom::CleanUpAMI",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AMICleanUpFunction",
                        "Arn"
                    ]
                },
                "AMIId": {
                    "Fn::GetAtt": [
                        "CreateAMI",
                        "ami"
                    ]
                },
                "Version": 1
            }
        },
        "WebServerASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "WebServerLC"
                },
                "MinSize": {
                    "Ref": "WebServerMinSize"
                },
                "MaxSize": {
                    "Ref": "WebServerMaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "WebServerDesiredCapacity"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ],
                "VPCZoneIdentifier": {
                    "Ref": "WebServerSubnets"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Web Server"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "WebServerLC": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "CreateAMI",
            "Properties": {
                "ImageId": {
                    "Fn::GetAtt": [
                        "CreateAMI",
                        "ami"
                    ]
                },
                "InstanceType": {
                    "Ref": "WebServerInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "NewIamInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#cloud-config\nruncmd:\n- echo \"This is the Magento Installation with Cloudformation\""
                    }
                }
            }
        },
        "WebServerTargetTrackingScalingPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "WebServerASG"
                },
                "Cooldown": "60",
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ASGAverageCPUUtilization"
                    },
                    "TargetValue": 80.0
                }
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Type": "application",
                "Scheme": "internet-facing",
                "Subnets": {
                    "Ref": "ElasticLoadBalancerSubnets"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "MagentoWebserverALB"
                    }
                ]
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/health",
                "HealthCheckPort": {
                    "Fn::If": [
                        "UseSSL",
                        443,
                        80
                    ]
                },
                "HealthCheckProtocol": {
                    "Fn::If": [
                        "UseSSL",
                        "HTTPS",
                        "HTTP"
                    ]
                },
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": {
                    "Fn::If": [
                        "UseSSL",
                        443,
                        80
                    ]
                },
                "Protocol": {
                    "Fn::If": [
                        "UseSSL",
                        "HTTPS",
                        "HTTP"
                    ]
                },
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VPCID"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.type",
                        "Value": "lb_cookie"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "30"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [
                    {
                        "Fn::If": [
                            "UseSSL",
                            {
                                "CertificateArn": {
                                    "Ref": "SSLCertificateId"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": {
                    "Fn::If": [
                        "UseSSL",
                        443,
                        80
                    ]
                },
                "Protocol": {
                    "Fn::If": [
                        "UseSSL",
                        "HTTPS",
                        "HTTP"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "The URL of the website",
            "Value": {
                "Fn::Sub": [
                    "${Param1}://${Param2}",
                    {
                        "Param2": {
                            "Fn::If": [
                                "UseELBName",
                                {
                                    "Fn::GetAtt": [
                                        "ApplicationLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                {
                                    "Ref": "DNSName"
                                }
                            ]
                        },
                        "Param1": {
                            "Fn::If": [
                                "UseSSL",
                                "https",
                                "http"
                            ]
                        }
                    }
                ]
            }
        },
        "ELBURL": {
            "Description": "The URL of the ELB, you should create a CNAME or alias to this name if you specified a DNS name",
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "AdminURL": {
            "Description": "Admin path",
            "Value": {
                "Fn::Select": [
                    "0",
                    {
                        "Fn::Split": [
                            "\"",
                            {
                                "Fn::Select": [
                                    "2",
                                    {
                                        "Fn::Split": [
                                            ":",
                                            {
                                                "Fn::GetAtt": [
                                                    "MagentoAMIWaitCondition",
                                                    "Data"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    }
}
